stages:
  - build
  - deploy

assembly:
  stage: build
  image: $CI_REGISTRY/swe/gitlab-ci/sbt:1.3-2.13-jdk-8

  before_script:
    - if [ -z "${CI_RSYNC_PASSWORD}" ]; then echo "set CI_RSYNC_PASSWORD"; exit 2; fi;
    - if [ -z "${CI_BASE_DIR}" ]; then echo "set CI_BASE_DIR"; exit 2; fi;
    - if [ -z "${CI_AWS_PROFILE}" ]; then echo "set CI_AWS_PROFILE"; exit 2; fi;
    - if [ -z "${CI_AWS_TARGET}" ]; then echo "set CI_AWS_TARGET"; exit 2; fi;
    - if [ -z "${CI_NRO_TARGET}" ]; then echo "set CI_NRO_TARGET"; exit 2; fi;
    - if [ -z "${CI_RESULT_FTP_PATH}" ]; then echo "set CI_RESULT_FTP_PATH";\
      exit 2; fi;

  script:
    - sbt clean assembly
    - mkdir artifacts
    - mv target/scala-2.13/nro-delegated-stats.jar artifacts
    - ./scripts/generate-script.sh > artifacts/nro-stats.sh
    - chmod +x artifacts/nro-stats.sh
    - cp ./scripts/fetch.sh  artifacts
    - cp ./scripts/rerun.sh  artifacts

  artifacts:
    paths:
      - artifacts

deploy:
  stage: deploy
  needs: ["assembly"]

  image: debian:buster-backports
  before_script:
    - if [ -z "${SSH_TARGET}" ]; then echo "set SSH_TARGET"; exit 2; fi;
    - if [ -z "${SSH_KEY}" ]; then echo "set SSH_KEY"; exit 2; fi;
    - if [ -z "${SSH_KNOWN_HOSTS}" ]; then echo "set SSH_KNOWN_HOSTS"; \
      exit 2; fi;
    - if [ -z "${NRO_STATS_HOME}" ]; then echo "set NRO_STATS_HOME"; exit 2; fi;
    - apt-get update && apt-get install docker.io openssh-client  --yes
    #- mkdir /root/.ssh/
    #- echo "$SSH_KNOWN_HOSTS" > /root/.ssh/known_hosts
    - eval "$(ssh-agent)"
    - echo "$SSH_KEY" | tr -d '\r' | ssh-add -

  script:
    - scp -oUserKnownHostsFile="$SSH_KNOWN_HOSTS" artifacts/* "$SSH_TARGET:$NRO_STATS_HOME"

  when: manual
